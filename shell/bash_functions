#!/bin/bash

# Set functions for working with bash

escape() {
  message=$1
  echo "${message}"
}

answer_is_yes() {
  [[ "$REPLY" =~ ^[Yy]$ ]] \
    && return 0 \
    || return 1
}

print_question() {
  # Print output in yellow
  printf "\e[0;33m  [?] $1\e[0m"
}

print_error() {
  # Print output in red
  printf "\e[0;31m  [✖] $1 $2\e[0m\n"
}

print_success() {
  # Print output in green
  printf "\e[0;32m  [✔] $1\e[0m\n"
}

ask_for_confirmation() {
  print_question "$1 (y/n) "
  read -n 1
  printf "\n"
}

# TODO(mperrotte): create function to find out where dotfiles repo was cloned to
subcmd_setup_bash_do() {
  cp ~/dotfiles/shell/bashrc ~/.bashrc
  cp ~/dotfiles/shell/bash_profile ~/.bash_profile
  cp ~/dotfiles/shell/bash_aliases ~/.bash_aliases
  cp ~/dotfiles/shell/bash_functions ~/.bash_functions
  source ~/.bashrc
  print_success "Bash setup complete."
}

subcmd_setup_bash() {
  ask_for_confirmation "Are you sure you want to init bash dotfiles?"
  if answer_is_yes; then
    subcmd_setup_bash_do
  else
    print_error "Aborting."
  fi
}

cmd_setup() {
  sub_command=$1
  case ${sub_command} in
    bash)
      subcmd_setup_bash
      ;;
    *)
      echo "Usage: $0 {bash}"
      return
      ;;
  esac
}

dotfiles() {
  command=$1
  sub_command=$2

  ##
  # NOTE(mperrotte):
  # if this function is used with no command then it should default
  # to the "aliased" behaviour which is to change directory to
  # the dotfiles folder
  ##
  if [ -z "${command}" ]; then
    cd ~/dotfiles
    return;
  fi

  case ${command} in
    setup)
      # Call setup function with sub command
      cmd_setup ${sub_command}
      ;;
    *)
      echo "Usage: $0 {setup}"
      return
      ;;
  esac
}

alias dotfiles=dotfiles
